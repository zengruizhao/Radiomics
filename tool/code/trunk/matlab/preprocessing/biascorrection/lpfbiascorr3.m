function [corrvol,lpfvol,sigma,meanlpfvals] = lpfbiascorr3(vol,sigma,noisethreshpct)
% LPFBIASCORR3 Perform 3D MRI inhomogeneity correction via low-pass filtering.
%
%   CV = LPFBIASCORR3(V) performs correction on the volume V and returns
%   the corrected volume CV.
%
%   LPFBIASCORR3(V,SIGMA) uses a sigma of SIGMA for construction of the
%   Gaussian smoothing kernel for the LPF. Default is size(I,1)/32. Higher
%   SIGMA means lower frequencies corrected. SIGMA may be a 3 element
%   vector for each dimension [x y z].
%   
%   LPFBIASCORR3(V,SIGMA,NOISETHRESHPCT) treats as noise any values in V
%   that are below max(V(:))*NOISETHRESHPCT, and sets these pixels/voxels
%   to the average signal intensity.  Default is 0.  Percentages may be
%   expressed as fractional values <1 or literal percentages >=1.  A half
%   of a percent is expressed as .005, NOT .5! (which is 50%)
%
%   [CV,LPFV] = LPFBIASCORR3(...) returns the low frequency volume LPFV 
%   generated by application of the LPF to V.
%
%   NOTES
%   -----
%   -The cut-off frequency of the LPF is related to SIGMA by: wc = fs/SIGMA
%    where fs is the sample rate (e.g. 1 pixel/mm).
%   -The FWHM of the Gaussian is related to SIGMA by:
%    FWHM = 2*sqrt(2*log(2))*SIGMA =  2.3548 * SIGMA
%   -The size of the Gaussian window is set to 6*SIGMA.
%
%   REFERENCE
%   ---------
%   M. S. Cohen, R. M. Dubois, & M. M. Zeineh, “Rapid and effective 
%   correction of RF inhomogeneity for high field magnetic resonance 
%   imaging,” Human Brain Mapping, vol. 10, no. 4, pp. 204–211, 2000.
%
%   See also: LPFBIASCORR, JCONVN.
%
%JC

% Dimensions of input "volume"
[nrows,ncols,nslices]=size(vol);

if nargin<3 || isempty(noisethreshpct),
    noisethreshpct=0.0075;
elseif noisethreshpct>=1,
    noisethreshpct=noisethreshpct/100;
end

if nargin<2 || isempty(sigma),
    % sigma=sqrt(nrows/2)/4;
    sigma=size(vol)./[64 64 28]; % assume slices are few
end

if numel(sigma)==1, sigma=repmat(sigma,[3 1]); end

% Gaussian Window (to approximate frequency response of LPF)
% sigma=sqrt(nrows/2)/4; % cut-off freq. = fs/sigma = fs*4*sqrt(2)/sqrt(nrows)
% sigmasqrd=nrows/32;
% twosigmasqrd=nrows/16;
% twosigmasqrdinv=16/nrows;
twosigmasqrdinv=1./(2*sigma.^2);
x=1:ceil(sigma(1)*6)+1; x0=sigma(1)*3;
y=1:ceil(sigma(2)*6)+1; y0=sigma(2)*3;
z=1:ceil(sigma(3)*6)+1; z0=sigma(3)*3;
[X,Y,Z]=meshgrid(x,y,z);
% G=exp(-twosigmasqrdinv*((Y-y0).^2+(X-x0).^2+(Z-z0).^2));
G=exp(-((twosigmasqrdinv(1)*(Y-y0).^2)+(twosigmasqrdinv(2)*(X-x0).^2)+(twosigmasqrdinv(3)*(Z-z0).^2)));

% Current image and value at bottom noisethreshpct percentile
meansignal=mean(vol(:));
noisethresh=max(vol(:))*noisethreshpct;

% Set noise (i.e. low) values to average intensity of rest of image
Inoisemask=vol>noisethresh;
nsignalpixels=sum(Inoisemask(:)); % number of "non-noise" pixels
Inoisefilled=vol;
% meansignal=sum(sum(I(Inoisemask)))/nsignalpixels;
Inoisefilled(~Inoisemask)=meansignal; % signal mean

% Apply LPF to get LOW frequency image
% Ik=fftshift(fft2(Inoisefilled));
% Iklpf=G.*Ik; % (by multiplication in k-space)
% Ilpf=abs(ifft2(fftshift(Iklpf)));
lpfvol=jconvn(Inoisefilled,G);

% Apply correction
meanlpfvals=sum(lpfvol(Inoisemask))/nsignalpixels;
corrvol=meanlpfvals*vol./lpfvol;
