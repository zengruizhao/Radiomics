function [corrvol,lpfvol,sigma] = lpfbiascorr(vol,sigma,noisethreshpct)% LPFBIASCORR Perform MRI inhomogeneity correction via low pass filtering.%%   CI = LPFBIASCORR(I) performs correction on each slice (i.e. plane on%   dimension #3 of I) and returns the corrected slices CI.%%   LPFBIASCORR(I,SIGMA) uses a sigma of SIGMA for construction of the%   Gaussian smoothing kernel for the LPF. Default is size(I,1)/32. Higher%   SIGMA means lower frequencies corrected.%   %   LPFBIASCORR(I,SIGMA,NOISETHRESHPCT) treats as noise any values in I%   that are below max(I(:))*NOISETHRESHPCT, and sets these pixels/voxels%   to the average signal intensity. Default is 0.%%   [CI,LPFI] = LPFBIASCORR(...) returns the low frequency image LPFI %   generated by application of the LPF to I.%%   NOTES%   -----%   -The cut-off frequency of the LPF is related to SIGMA by: wc = fs/SIGMA%    where fs is the sample rate (e.g. 1 pixel/mm).%   -The FWHM of the Gaussian is related to SIGMA by:%    FWHM = 2*sqrt(2*log(2))*SIGMA =  2.3548 * SIGMA%   -The size of the Gaussian window is set to 6*SIGMA.%%   REFERENCE%   ---------%   M. S. Cohen, R. M. Dubois, & M. M. Zeineh, “Rapid and effective %   correction of RF inhomogeneity for high field magnetic resonance %   imaging,” Human Brain Mapping, vol. 10, no. 4, pp. 204–211, 2000.%%   See also: JCONV2, INHOMO_CORRN (ITK's algorithm).%%JC% Dimensions of input "volume"[nrows,ncols,nslices]=size(vol);if nargin<3 || isempty(noisethreshpct),    noisethreshpct=0;elseif noisethreshpct>=1,    noisethreshpct=noisethreshpct/100;endif nargin<2 || isempty(sigma),    % sigma=sqrt(nrows/2)/4;    sigma=nrows/32;end% Allocate corrected volumecorrvol=zeros(size(vol));lpfvol=zeros(size(vol));% Gaussian Window (to approximate frequency response of LPF)% sigma=sqrt(nrows/2)/4; % cut-off freq. = fs/sigma = fs*4*sqrt(2)/sqrt(nrows)% sigmasqrd=nrows/32;% twosigmasqrd=nrows/16;% twosigmasqrdinv=16/nrows;twosigmasqrdinv=1/(2*sigma^2);x=1:ceil(sigma*6)+1; x0=sigma*3;y=1:ceil(sigma*6)+1; y0=sigma*3;[X,Y]=meshgrid(x,y);G=exp(-twosigmasqrdinv*((Y-y0).^2+(X-x0).^2));meansignal=mean(vol(:));for i=1:nslices,    % Current image and value at bottom noisethreshpct percentile    I=vol(:,:,i);    noisethresh=max(max(I))*noisethreshpct;        % Set noise (i.e. low) values to average intensity of rest of image    Inoisemask=I>noisethresh;    nsignalpixels=sum(sum(Inoisemask)); % number of "non-noise" pixels    Inoisefilled=I;    % meansignal=sum(sum(I(Inoisemask)))/nsignalpixels;    Inoisefilled(~Inoisemask)=meansignal; % signal mean        % Apply LPF to get LOW frequency image    % Ik=fftshift(fft2(Inoisefilled));    % Iklpf=G.*Ik; % (by multiplication in k-space)    % Ilpf=abs(ifft2(fftshift(Iklpf)));    Ilpf=jconv2(Inoisefilled,G);%     Ilpf=imfilter(Inoisefilled,G);    lpfvol(:,:,i)=Ilpf;        % Apply correction    meanlpfvals=sum(Ilpf(Inoisemask))/nsignalpixels;    Icorr=meanlpfvals*I./Ilpf;        corrvol(:,:,i)=Icorr;end