function [Ha,mstlength,mst,knnlen] = mstentropy(X,k,gamma,alpha)
% MSTENTROY Estimate entropy of multivariate data using MST graph length.
%
%   H = mstentropy(X) return entropy H for data X of size N-by-D.
%
%   [H,MSTLENGTH] = gmstentropy(X) return the total MST edge length.
%
%   [H,MSTLENGTH,MST] = gmstentropy(X) return the MST.
%
%   View the GMST graph by:
%    mst_undirected=tril(mst+mst');
%    view(biograph(mst_undirected,[],'ShowArrows','off','ShowWeights','on'))
%
%JC

[npts, d]=size(X);

% kNN sparse distance matrix
% [knnlen,knns,knndists]=knnkdtreemex(X,k,gamma); % gamma only applied to knnlen, not knndists, must apply after mst
% ii=1:size(X,1); ii=repmat(ii,k,1);
% kNNGs=sparse(ii(:),knns(:),knndists(:));
% kNNGsUG=tril(kNNGs+kNNGs');
% bidirectional=find(tril(kNNGs & kNNGs'));
% kNNGsUG(bidirectional)=kNNGs(bidirectional);

% Minimum Spanning Tree (MST) on kNN Euclidean distance matrix
% [mst,pred]=graphminspantree(tril(kNNGsUG),'method','kruskal'); %#ok<NASGU>
% [mst,pred]=graphminspantree(kNNGs,'method','kruskal'); %#ok<NASGU>
% [mst,pred]=graphminspantree(sparse(Dm),'method','kruskal'); %#ok<NASGU>
% [mst,pred]=graphminspantree(sparse(Dm)); %#ok<NASGU>

% Use my Prim's method mex function instead (takes X directly and is faster)
[~,~,mst,lastedge,knnlen]=primmex_kdtree(X,k);
if lastedge<(npts-1), fprintf('lastedge: %d.\n',lastedge); end
npts=lastedge+1;

if isempty(gamma), gamma=d-alpha*d; end

% Total MST edge length
if gamma~=1,
    mstlength=sum(nonzeros(mst).^gamma);
else
    mstlength=sum(nonzeros(mst));
end

% alpha-Entropy estimate
if nargin<4 || isempty(alpha),
    alpha=(d-gamma)/d;
%     beta_d_gamma=(gamma)/(d);
%     beta_d_gamma=1;
%     beta_d_gamma=1/(d-gamma); % what should this really be?
%     fprintf('alpha=%g, beta_d_gamma=%g.\n',alpha,beta_d_gamma);
% else
%     beta_d_gamma=1;
end

% alpha=(d-gamma)/d;
beta_d_gamma=getbeta(gamma,d);
% beta_d_gamma=1;
fprintf('alpha=%g, beta_d_gamma=%g.\n',alpha,beta_d_gamma);

nalphas=numel(alpha);
if nalphas>1,
    Ha=zeros(nalphas,1);
    for i=1:nalphas,
        Ha(i)=(1/(1-alpha(i)))*(log(mstlength/(npts^alpha(i))) - log(beta_d_gamma)) * log2(exp(1)); % bits
    end
else
%     log(mstlength/(npts^alpha))
    Ha=(1/(1-alpha))*(log(mstlength/(npts^alpha)) - log(beta_d_gamma)) * log2(exp(1)); % bits
end


function beta_d_gamma_estim=getbeta(gamma,d)

gammas=.5:.05:1.5;
beta_d_gamma_estims=[0.885370452168800,0.780842619546567,0.796019213319828,0.824560131378627,0.857302613318092,0.887106328893502,0.917343021684906,0.945362706262527,0.971395431154288,0.995790406490049,1.02091594908068,1.04311777928939;...
    0.888030859219188,0.764632617700251,0.779410782189432,0.809641775602845,0.844783095454337,0.876995932936049,0.909820116945414,0.940369655794846,0.968847901010130,0.995605712469646,1.02324461621050,1.04772757486023;...
    0.892710544292888,0.749204011589736,0.763365877844633,0.795131193217449,0.832543746728200,0.867077883084904,0.902420468926392,0.935455709918519,0.966353728870441,0.995462236790617,1.02561603435487,1.05239243758911;...
    0.899357760091842,0.734509318792898,0.747859096054724,0.781013692162727,0.820576345494724,0.857347385842398,0.895141529503923,0.930619518521579,0.963912240258789,0.995359727535417,1.02803028851510,1.05711276358697;...
    0.907937968610362,0.720504756260574,0.732866475938301,0.767275246496241,0.808872976180804,0.847799800731255,0.887980820163224,0.925859764577783,0.961522777438122,0.995297941896152,1.03048747025292,1.06188895647620;...
    0.918432170279717,0.707149895186573,0.718365401134932,0.753902459987230,0.797426015453710,0.838430634381627,0.880935929693303,0.921175163219768,0.959184699000480,0.995276646002155,1.03298767765097,1.06672142743384;...
    0.930835588994267,0.694407353489917,0.704334508903549,0.740882532039562,0.786228119124842,0.829235534886310,0.874004511972093,0.916564460842728,0.956897379469569,0.995295614753514,1.03553101527598,1.07161059523667;...
    0.945156651468664,0.682242521225087,0.690753606419114,0.728203225772611,0.775272209743906,0.820210286410446,0.867184283838033,0.912026434237725,0.954660208915477,0.995354631659979,1.03811759414442,1.07655688630826;...
    0.961416212979566,0.670623314892298,0.677603593614516,0.715852838103280,0.764551464841803,0.811350804042474,0.860473023044245,0.907559889752998,0.952472592581430,0.995453488685341,1.04074753169067,1.08156073476774;...
    0.979646992066225,0.659519957173404,0.664866391981375,0.703820171685620,0.754059305783378,0.802653128873881,0.853868566291638,0.903163662482978,0.950333950522069,0.995591986097006,1.04342095173766,1.08662258248071;...
    0.999893184976786,0.648904779089161,0.652524878802521,0.692094508575878,0.743789387193867,0.794113423296433,0.847368807337483,0.898836615483426,0.948243717252712,0.995769932320589,1.04613798446982,1.09174287911181;...
    1.02221023711842,0.638752041972166,0.640562826341438,0.680665585501456,0.733735586925070,0.785727966505330,0.840971695176055,0.894577639012009,0.946201341409659,0.995987143799528,1.04889876640848,1.09692208217929;...
    1.04666475391945,0.629037776990521,0.628964845560725,0.669523570622056,0.723891996529787,0.777493150198505,0.834675232288355,0.890385649793507,0.944206285420598,0.996243444859290,1.05170344038952,1.10216065711150;...
    1.07333453765595,0.619739640248138,0.617716333983165,0.658659041679832,0.714252912214870,0.769405474461938,0.828477472957810,0.886259590308401,0.942258025185362,0.996538667576294,1.05455215554328,1.10745907730516;...
    1.10230874016917,0.610836781737110,0.606803427346203,0.648062965443658,0.704812826245376,0.761461543831840,0.822376521649050,0.882198428104534,0.940356049766285,0.996872651651222,1.05744506727669,1.11281782418563;...
    1.13368812418444,0.602309726631979,0.596212954733715,0.637726678359792,0.695566418774060,0.753658063525011,0.816370531447174,0.878201155130423,0.938499861088070,0.997245244286848,1.06038233725755,1.11823738726895;...
    1.16758542827352,0.594140267600960,0.585932396898637,0.627641868327872,0.686508550071901,0.745991835829157,0.810457702554881,0.874266787090032,0.936688973646741,0.997656300069787,1.06336413340116,1.12371826422593;...
    1.20412583248789,0.586311366968612,0.575949847516705,0.617800557527541,0.677634253137216,0.738459756645381,0.804636280844946,0.870394362817914,0.934922914227491,0.998105680856616,1.06639062985868,1.12926096094801;...
    1.24344752341202,0.578807067703090,0.566253977135139,0.608195086226246,0.668938726662104,0.731058812175391,0.798904556465751,0.866582943673997,0.933201221631066,0.998593255663796,1.06946200700795,1.13486599161504;...
    1.28570235891031,0.571612412321199,0.556833999601770,0.598818097504320,0.660417328336376,0.723786075746718,0.793260862497650,0.862831612957542,0.931523446408441,0.999118900561496,1.07257845144613,1.14053387876507;...
    1.33105663421913,0.564713368909114,0.547679640779176,0.589662522837692,0.652065568470458,0.716638704769049,0.787703573658007,0.859139475339430,0.929889150603523,0.999682498571206,1.07574015598440,1.14626515336595;];

[gdiff,whichgamma]=min(abs(gammas-gamma));
if gdiff>0.05, warning('mstentropy:getbeta:noBeta','No suitable precalculated beta found.'); end

beta_d_gamma_estim=beta_d_gamma_estims(whichgamma,d);
