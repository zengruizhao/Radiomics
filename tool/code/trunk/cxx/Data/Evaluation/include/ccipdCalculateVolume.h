#ifndef __ccipdCalculateVolume_h
#define __ccipdCalculateVolume_h


 
//////////////////////////////////////////////////////////////////////////////////////////
#include "ccipdCore.h"
#include "ccipdITKForwardDeclarations.h"
//////////////////////////////////////////////////////////////////////////////////////////



namespace ccipd
{



//////////////////////////////////////////////////////////////////////////////////////////
/**
 * \brief Get the volume of a single pixel in the image in mm^3.
 */
template< unsigned int TDimension >
EvaluationValueType GetSinglePixelVolume(
  const itk::ImageBase< TDimension > & image );
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
/**
 * \brief Get the volume of the entire buffered image in mm^3.
 */
template< unsigned int TDimension >
EvaluationValueType GetTotalImageVolume(
  const itk::ImageBase< TDimension > & image );
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
/**
 * \brief Get the volume of pixels with a given value (pixelValue) in mm^3.
 */
template< typename TPixelType, unsigned int TDimension >
EvaluationValueType GetVolume(
  const itk::Image< TPixelType, TDimension > * const image,
  const TPixelType                                   pixelValue );
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
/**
 * \brief Get the volume of non-zero pixels in the image in mm^3
 */
template< typename TPixelType, unsigned int TDimension >
EvaluationValueType GetVolume(
  const itk::Image< TPixelType, TDimension > * const image );
//////////////////////////////////////////////////////////////////////////////////////////



} // namespace ccipd
#endif // __ccipdCalculateVolume_h
