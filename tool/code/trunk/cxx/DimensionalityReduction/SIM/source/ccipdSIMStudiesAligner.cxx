


//////////////////////////////////////////////////////////////////////////////////////////
// ccipd includes
#include "ccipdSIMStudiesAligner.h"
#include "ccipdStudy.h"

// serialization includes
#include "ccipdDimensionalityReductionOptions.h"
#ifdef Boost_SERIALIZATION_FOUND

  #include "ccipdUnorderedMapSerialization.h"    // for serializing our affine cache
  #include "ccipdSharedPointerSerialization.hxx" // for serializing smart pointers
  #include "ccipdMatrixSerialization.h"          // for serializing affine params

  #include <boost/serialization/set.hpp>
  #include <boost/archive/xml_iarchive.hpp>
  #include <boost/archive/xml_oarchive.hpp>

#endif // Boost_SERIALIZATION_FOUND
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
using std::cout;
using std::cerr;
using std::endl;
//////////////////////////////////////////////////////////////////////////////////////////



namespace ccipd
{


//////////////////////////////////////////////////////////////////////////////////////////
class SIMStudiesAligner::SecretData
{

public:
  SecretData(); ///< Constructor

  bool
    m_Verbose,
    m_RecalculateTransform;
  StudyConstPointer
    m_TemplateStudy;
  StudyConstCollectionType
    m_Studies;

}; // class SecretData
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
SIMStudiesAligner::SecretData::SecretData() :
m_Verbose( true  ),
m_RecalculateTransform( false )
{
} // Constructor
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
SIMStudiesAligner::SIMStudiesAligner() :
ccipdNewPIMPLMacro
{
} // constructor
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
SIMStudiesAligner::~SIMStudiesAligner()
{
} // denstructor
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
void SIMStudiesAligner::AddStudy( const StudyConstPointer & study )
{

  // see if it already exists
  StudyConstCollectionType & studies = this->m_SecretData->m_Studies;

  if ( studies.find( study ) == studies.cend() )
    {
    // nope; insert it
    studies.insert( study );
    }

} // AddStudy
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
void SIMStudiesAligner::AddStudies( const StudyConstCollectionType & studies )
{
  this->m_SecretData->m_Studies.insert( studies.cbegin(), studies.cend() );
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
void SIMStudiesAligner::AddStudies( const StudyCollectionType & studies )
{
  this->m_SecretData->m_Studies.insert( studies.cbegin(), studies.cend() );
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
void SIMStudiesAligner::ClearStudies()
{
  this->m_SecretData->m_Studies.clear();
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
SIMStudiesAligner::AffineTransformConstPointer
SIMStudiesAligner::CalculateAffineTransform( const Study & study ) const
{

  if ( this->GetRecalculateTransform() || !study.HasAffineTransform() )
    return this->RecalculateAffineTransform( study );
  else
    return study.GetAffineTransform();

} // CalculateAffineTransform
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
void SIMStudiesAligner::SetTemplateStudy( const StudyConstPointer & study )
{
  this->m_SecretData->m_TemplateStudy = study;
  this->ClearCache(); // clear the cached transforms
} // SetTemplateStudy
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
void SIMStudiesAligner::ClearCache()
{
  this->Superclass::ClearCache();
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
ccipdSetByvalImplementMacro( SIMStudiesAligner, 
  Verbose,       bool           )
ccipdSetByvalImplementMacro( SIMStudiesAligner, 
  RecalculateTransform, bool           )
ccipdGetConstImplementMacro( SIMStudiesAligner, 
  RecalculateTransform, bool           )
ccipdGetConstImplementMacro( SIMStudiesAligner, 
  Studies,       StudyConstCollectionType )
ccipdGetConstImplementMacro( SIMStudiesAligner, 
  TemplateStudy, StudyConstPointer        )
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
#ifdef Boost_SERIALIZATION_FOUND

ccipdSerializationImplementationHeadingMacro( SIMStudiesAligner )
{

  if ( version < 1 )
    return;

  using boost::serialization::void_cast_register;
  using boost::serialization::make_nvp;
 
  void_cast_register(
    static_cast< Self               * >( NULL ),
    static_cast< StudyAffineAligner * >( NULL ) );

  // now, serialize
  archive
    //& BOOST_SERIALIZATION_BASE_OBJECT_NVP( Superclass )
    & make_nvp( "Verbose", this->m_SecretData->m_Verbose );

  if ( version >= 2 )
    archive & make_nvp(
      "RecalculateTransform", this->m_SecretData->m_RecalculateTransform );
  
} // serialize

ccipdSerializationXMLMacro( SIMStudiesAligner )

#endif // Boost_SERIALIZATION_FOUND
//////////////////////////////////////////////////////////////////////////////////////////



} // namespace

