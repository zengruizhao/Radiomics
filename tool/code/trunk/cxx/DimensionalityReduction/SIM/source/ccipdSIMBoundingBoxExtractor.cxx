


//////////////////////////////////////////////////////////////////////////////////////////
// ccipd include
#include "ccipdSIMBoundingBoxExtractor.h"

#include "ccipdDisableWarningsMacro.h"
  // itk includes
  #include <itkImage.h>
#include "ccipdEnableWarningsMacro.h"

// serialization includes
#ifdef Boost_SERIALIZATION_FOUND
  #include <boost/archive/xml_iarchive.hpp>
  #include <boost/archive/xml_oarchive.hpp>
#endif // Boost_SERIALIZATION_FOUND
//////////////////////////////////////////////////////////////////////////////////////////



namespace ccipd
{



//////////////////////////////////////////////////////////////////////////////////////////
SIMBoundingBoxExtractor::SIMBoundingBoxExtractor()
{
} // constructor
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
SIMBoundingBoxExtractor::~SIMBoundingBoxExtractor()
{
} // destructor
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
SIMBoundingBoxExtractor::BoundingBoxImageConstPointer
SIMBoundingBoxExtractor::GetBoundingBoxImage(
  const StudyConstPointer & study )
{
  return this->SuperclassImageCache::GetImage( study );
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
SIMBoundingBoxExtractor::BoundingBoxImageConstPointer
SIMBoundingBoxExtractor::GetBoundingBoxImage(
  const StudyConstPointer & study ) const
{
  return this->SuperclassImageCache::GetImage( study );
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
SIMBoundingBoxExtractor::BoundingBoxImageConstPointer
SIMBoundingBoxExtractor::CalculateImage(
  const Study & study ) const
{
  return this->CalculateBoundingBoxImage( study );
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
#ifdef Boost_SERIALIZATION_FOUND

ccipdSerializationImplementationHeadingMacro( SIMBoundingBoxExtractor )
{

  if ( version < 1 )
    return;

  // now, serialize
  archive
    & BOOST_SERIALIZATION_BASE_OBJECT_NVP( SuperclassBoundingBoxCache )
    & BOOST_SERIALIZATION_BASE_OBJECT_NVP( SuperclassImageCache       );
    
} // serialize

ccipdSerializationXMLMacro( SIMBoundingBoxExtractor )

#endif  
//////////////////////////////////////////////////////////////////////////////////////////



} // namespace ccipd
