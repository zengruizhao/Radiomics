#ifndef __ccipdProstalignTPSOptions_h
#define __ccipdProstalignTPSOptions_h





//////////////////////////////////////////////////////////////////////////////////////////

// ccipd includes
#include "ccipdMacros.h"

#ifdef _MSC_VER
#pragma warning( push, 0 )
#endif // _MSC_VER

// qt includes
#include <QDialog>

#ifdef _MSC_VER
#pragma warning( pop )
#endif // _MSC_VER

//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
// Forward Qt class declarations
class Ui_ProstalignTPSOptions;
//////////////////////////////////////////////////////////////////////////////////////////
 

namespace ccipd
{


/**
 * \brief Options GUI window for Prostalign.
 * 
 * \author  Rob Toth
 * \ingroup Prostalign
 */
class ProstalignTPSOptions : public QDialog
{



//////////////////////////////////////////////////////////////////////////////////////////
  Q_OBJECT
//////////////////////////////////////////////////////////////////////////////////////////



public:
//////////////////////////////////////////////////////////////////////////////////////////
  
  ProstalignTPSOptions(
    const bool keepLandmarks = false ); /// < Constructor

  virtual ~ProstalignTPSOptions(); ///< Destructor

  /// Should you retain the landmarks when loading a new image?
  ccipdGetConstDeclareMacro( KeepLandmarks, bool );

//////////////////////////////////////////////////////////////////////////////////////////



public slots:
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////



protected:
protected slots:
//////////////////////////////////////////////////////////////////////////////////////////
  /*
  /// For when the user selects a different image on the left.
  void SlotLeftImageComboChanged( const QString & comboItem );

  /// For when the user selects a different image on the right.
  void SlotRightImageComboChanged( const QString & comboItem );
  
  /// For when the user selects a different Checkerboard on the left.
  void SlotLeftCheckerboardComboChanged( const QString & comboItem );

  /// For when the user selects a different Checkerboard on the right.
  void SlotRightCheckerboardComboChanged( const QString & comboItem );

  /// For saving animation frames in a directory.
  void SlotSaveAnimation();
  */
//////////////////////////////////////////////////////////////////////////////////////////
 


private:
//////////////////////////////////////////////////////////////////////////////////////////
  /// Designer form
  Ui_ProstalignTPSOptions * const ui;
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
  /// PIMPL macro
  //ccipdPIMPLMacro
//////////////////////////////////////////////////////////////////////////////////////////



}; // class
} // namespace
#endif // __ccipdProstalignTPSOptions_h
