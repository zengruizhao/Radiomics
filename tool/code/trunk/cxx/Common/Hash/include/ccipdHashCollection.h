#ifndef __ccipdHashCollection_h
#define __ccipdHashCollection_h



//////////////////////////////////////////////////////////////////////////////////////////
/**
 * Sometimes our collection of patient data can be
 * unsorted. But when we hash an entire collection,
 * we really want to know what the hash would be
 * of a sorted collection.
 *
 * That functionality is what these functions provide.
 *
 * You don't need to include the .hxx file
 * (which will slow down compilation)
 *
 */
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
#include "ccipdHashable.h"

// std includes
#include "ccipdDisableWarningsMacro.h"
  #include <set> // for sorted hash values
#include "ccipdEnableWarningsMacro.h"
//////////////////////////////////////////////////////////////////////////////////////////



namespace ccipd
{



//////////////////////////////////////////////////////////////////////////////////////////
typedef std::set<
  HashValueType
> SortedHashCollectionType;
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
// the actual computations are in this function
template< typename ContainerOfHashablePointers >
SortedHashCollectionType GetSortedHashValues(
  const ContainerOfHashablePointers & hashableObjects );
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
HashValueType GetHashValue( const SortedHashCollectionType & sortedHashes );
//////////////////////////////////////////////////////////////////////////////////////////



} // namespace
#endif // __ccipdHashCollection_h
