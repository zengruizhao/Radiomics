


//////////////////////////////////////////////////////////////////////////////////////////
#include "ccipdHashable.h"
//////////////////////////////////////////////////////////////////////////////////////////




namespace ccipd
{



//////////////////////////////////////////////////////////////////////////////////////////
class Hashable::SecretData
{
public:
  SecretData();
  mutable HashValueType m_Hash;        ///< The hash value.
  mutable bool          m_ClearedHash; ///< Whether we need to recompute the hash.
}; // class SecretData
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
Hashable::Hashable() :
ccipdNewPIMPLMacro
{
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
Hashable::SecretData::SecretData() :
m_ClearedHash( true ) // start out cleared
{
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
Hashable::~Hashable()
{
}
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
HashValueType Hashable::GetHash() const
{

  // check if we have cahced a value and
  // if not, recalculate and cache it
  if ( this->m_SecretData->m_ClearedHash )
    {
    this->m_SecretData->m_Hash        = this->ReHash();
    this->m_SecretData->m_ClearedHash = false;
    }

  // return our hashed value
  return this->m_SecretData->m_Hash;

} // GetHash
//////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////
void Hashable::ClearHash() const
{

  // say we've cleared our hash value
  this->m_SecretData->m_ClearedHash = true;

} // ClearHash
//////////////////////////////////////////////////////////////////////////////////////////



} // 
