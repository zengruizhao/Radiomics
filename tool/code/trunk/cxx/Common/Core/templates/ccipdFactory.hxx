#ifndef __ccipdFactory_hxx
#define __ccipdFactory_hxx



//////////////////////////////////////////////////////////////////////////////////////////////////
#include "ccipdFactory.h"
#include "ccipdEnableSharedFromThis.hxx"
//////////////////////////////////////////////////////////////////////////////////////////////////



namespace ccipd
{



//////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * http://bit.ly/VF3FEN
 * 
 *
 * You may need to do this for serializable classes
 * in the serialize function:

#ifdef Boost_SERIALIZATION_FOUND
  boost::serialization::void_cast_register(
    static_cast< ConcreteFactorySelf< Self > * >( NULL ),
    static_cast< Self * >( NULL ) );
#endif

 * and outside of any namespace:
 * 
 * 

typedef ccipd::ConcreteFactorySelf< ccipd::MyClass > MyClassConcrete;
BOOST_CLASS_EXPORT_GUID( ccipd::MyClass , "MyClass" )
BOOST_CLASS_EXPORT( MyClassConcrete )

 * 
 */
template< class TSelf >
struct ConcreteFactorySelf : TSelf { };
//////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////
template< class TSelf >
Factory< TSelf >::Factory()
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////
template< class TSelf >
Factory< TSelf >::~Factory()
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////
template< class TSelf >
typename
Factory< TSelf >::Pointer
Factory< TSelf >::New()
{
  return std::make_shared< ConcreteFactorySelf< Self > >();
}
//////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////
template< class TSelf >
typename
Factory< TSelf >::ConstPointer
Factory< TSelf >::ConstNew()
{
  return std::make_shared< const ConcreteFactorySelf< Self > >(); // should this also use the ccipdEnableSharedFromThis class?
}
//////////////////////////////////////////////////////////////////////////////////////////////////



} // namespace ccipd
#endif // __ccipdFactory_hxx
